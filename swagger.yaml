openapi: 3.0.3
info:
  title: SW Festival API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/
    description: Local dev

paths:
  /admin/tables/ensure:
    post:
      summary: Ensure table by label (create if missing) and return slug URL
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [label]
              properties:
                label:
                  type: string
                  example: A-10
                active:
                  type: boolean
                  default: true
      responses:
        '201':
          description: Created (table newly created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsureTableResponse'
              examples:
                created:
                  value:
                    success: true
                    message: created successfully
                    data:
                      table:
                        { id: 1, label: A-10, slug: ezygbX, is_active: true }
                      qr: { slugUrl: 'http://localhost:8080/t/ezygbX' }
                      created: true
        '200':
          description: OK (table already existed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsureTableResponse'
              examples:
                existed:
                  value:
                    success: true
                    message: request retrieved successfully
                    data:
                      table:
                        { id: 1, label: A-10, slug: ezygbX, is_active: true }
                      qr: { slugUrl: 'http://localhost:8080/t/ezygbX' }
                      created: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/tables/{id}/qr/update:
    post:
      summary: Rotate QR token for a table (revoke old, issue new)
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
          description: Table ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RotateTokenResponse'
              examples:
                ok:
                  value:
                    success: true
                    message: QR token rotated successfully
                    data:
                      table:
                        id: 1
                        label: A-10
                        slug: WKSo9VVdn8v
                        is_active: true
                      qr:
                        tokenUrl: 'http://localhost:8080/t?code=f07e...c2'
                        slugUrl: 'http://localhost:8080/t/WKSo9VVdn8v'
                      token: 'f07e...c2'
                      expires_at: null
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions/resolve:
    post:
      summary: Open a session by rotating token (QR code)
      tags: [Public]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code:
                  type: string
                  description: Active QR token from the scanned URL (?code=...)
                  example: f07e0f4d5b3b4f8eac...
      responses:
        '200':
          description: Session opened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionOpenResponse'
              examples:
                ok:
                  value:
                    success: true
                    message: session opened
                    data:
                      session_token: '4e6d...ab'
                      session_id: 321
                      table: { id: 1, label: A-10, slug: q8L2Xa }
                      abs_ttl_min: 120
                      idle_ttl_min: 30
        '422':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid:
                  value: { success: false, message: 'invalid or revoked token' }
                expired:
                  value: { success: false, message: 'token expired' }
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions/{id}/close:
    post:
      summary: Force-close a session by ID
      tags: [Public]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleOkResponse'
              examples:
                ok:
                  value:
                    { success: true, message: 'session closed successfully' }
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notfound:
                  value: { success: false, message: 'session not found' }
        '409':
          description: Session not open (already closed/expired)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflict:
                  value: { success: false, message: 'session not open' }
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/login:
    post:
      summary: Admin PIN login (issue JWT)
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
            examples:
              sample:
                value: { pin: '1234' }
      responses:
        '200':
          description: Login successful (JWT issued)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
              examples:
                ok:
                  value:
                    success: true
                    message: 'Login successful'
                    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        '400':
          description: Missing PIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing:
                  value: { success: false, message: 'PIN is required' }
        '401':
          description: Invalid PIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid:
                  value: { success: false, message: 'Invalid PIN' }
        '500':
          $ref: '#/components/responses/ServerError'


  /orders:
    post:
      summary: Create an order (session required)
      description: Create a new order with line items. Uses session token from QR flow. TAKEOUT applies 10% discount.
      tags: [Public]
      parameters:
        - in: header
          name: x-session-token
          required: false
          schema: { type: string }
          description: Session token (preferred). Alternatively use `Authorization: Session <token>`.
        - in: header
          name: Authorization
          required: false
          schema: { type: string, example: "Session 4e6d...ab" }
          description: Alternative header if `x-session-token` is not used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
            examples:
              dine_in:
                summary: DINE_IN example
                value:
                  order_type: DINE_IN
                  payer_name: 임승우
                  items:
                    - { product_id: 1, quantity: 2 }
                    - { product_id: 3, quantity: 1 }
              takeout:
                summary: TAKEOUT example (10% off)
                value:
                  order_type: TAKEOUT
                  payer_name: 임승우
                  items:
                    - { product_id: 2, quantity: 1 }
                    - { product_id: 5, quantity: 3 }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateResponse'
              examples:
                ok:
                  value:
                    success: true
                    message: order created
                    data:
                      order_id: 123
                      order_type: DINE_IN
                      status: PENDING
                      subtotal_amount: 22000.00
                      discount_amount: 0.00
                      total_amount: 22000.00
        '400':
          description: Bad Request (invalid items, quantity < 1, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidItems:
                  value: { success: false, message: 'items required' }
        '401':
          description: Unauthorized (missing/invalid session)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                noSession:
                  value: { success: false, message: 'No session token' }
        '409':
          description: Conflict (out of stock, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflict:
                  value: { success: false, message: 'out of stock' }
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Table:
      type: object
      properties:
        id: { type: integer, example: 1 }
        label: { type: string, example: A-10 }
        slug: { type: string, example: ezygbX }
        is_active: { type: boolean, example: true }
    EnsureTableData:
      type: object
      properties:
        table:
          $ref: '#/components/schemas/Table'
        qr:
          type: object
          properties:
            slugUrl: { type: string, example: 'http://localhost:8080/t/ezygbX' }
        created: { type: boolean, example: true }
    EnsureTableResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: created successfully }
        data:
          $ref: '#/components/schemas/EnsureTableData'

    RotateTokenData:
      type: object
      properties:
        table:
          $ref: '#/components/schemas/Table'
        qr:
          type: object
          properties:
            tokenUrl:
              {
                type: string,
                example: 'http://localhost:8080/t?code=f07e...c2',
              }
            slugUrl:
              { type: string, example: 'http://localhost:8080/t/WKSo9VVdn8v' }
        token: { type: string, example: f07e...c2 }
        expires_at:
          type: string
          format: date-time
          nullable: true
          example: null
    RotateTokenResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: QR token rotated successfully }
        data:
          $ref: '#/components/schemas/RotateTokenData'

    AdminLoginRequest:
      type: object
      required: [pin]
      properties:
        pin:
          type: string
          example: '1234'

    AdminLoginResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: Login successful }
        token:
          type: string
          description: 'JWT. Use as Authorization: Bearer <token>'
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

    
    OrderItemInput:
      type: object
      required: [product_id, quantity]
      properties:
        product_id: { type: integer, example: 1, minimum: 1 }
        quantity:   { type: integer, example: 2, minimum: 1 }

    OrderCreateRequest:
      type: object
      required: [items]
      properties:
        order_type:
          type: string
          enum: [DINE_IN, TAKEOUT]
          default: DINE_IN
        payer_name:
          type: string
          nullable: true
          example: 임승우
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemInput'

    OrderCreateData:
      type: object
      properties:
        order_id:        { type: integer, example: 123 }
        order_type:      { type: string, example: DINE_IN }
        status:          { type: string, example: PENDING }
        subtotal_amount: { type: number, format: float, example: 22000.00 }
        discount_amount: { type: number, format: float, example: 0.00 }
        total_amount:    { type: number, format: float, example: 22000.00 }

    OrderCreateResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: order created }
        data:
          $ref: '#/components/schemas/OrderCreateData'

    SessionOpenData:
      type: object
      properties:
        session_token: { type: string, example: '4e6d...ab' }
        session_id: { type: integer, example: 321 }
        table:
          $ref: '#/components/schemas/Table'
        abs_ttl_min: { type: integer, example: 120 }
        idle_ttl_min: { type: integer, example: 30 }
    SessionOpenResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: session opened }
        data:
          $ref: '#/components/schemas/SessionOpenData'

    SimpleOkResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: session closed successfully }

    ErrorResponse:
      type: object
      properties:
        success: { type: boolean, example: false }
        message: { type: string, example: Bad Request }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missingLabel:
              value: { success: false, message: 'label (string) is required' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            notfound:
              value: { success: false, message: 'table not found or inactive' }
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
