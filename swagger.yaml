openapi: 3.0.3
info:
  title: SW Festival API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/
    description: Local dev

paths:
  /admin/tables/ensure:
    post:
      summary: 테이블 QR 코드용 암호화된 식별자 생성 API
      description: >
        관리자가 테이블 라벨(label)을 지정하면, 해당 라벨에 해당하는 테이블을 찾아 존재하지 않으면 새로 생성하고,  
        이미 존재하면 기존 테이블을 반환한다.  
        반환되는 데이터에는 **QR 코드 URL에 붙일 수 있는 암호화된 slug 값**이 포함된다.
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [label]
              properties:
                label:
                  type: string
                  example: A-10
                active:
                  type: boolean
                  default: true
      responses:
        '201':
          description: Created (table newly created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsureTableResponse'
        '200':
          description: OK (table already existed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsureTableResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions/{id}/close:
    post:
      summary: 관리자 권한으로 세션 강제 종료 API
      description: >
        특정 테이블에서 열린 세션이 정상적으로 종료되지 않았거나 **세션 상태가 꼬였을 때**,  
        관리자가 세션 ID를 지정하여 해당 세션을 강제로 종료할 수 있다.  
        정상적으로 종료되면 세션 상태는 닫힘으로 업데이트된다.
      tags: [Admin]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleOkResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Session not open (already closed/expired)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/login:
    post:
      summary: 관리자 PIN 로그인 API
      description: >
        관리자가 사전에 설정된 **PIN 번호**를 입력하여 로그인하면,  
        인증 성공 시 JWT 토큰이 발급된다.  
        이 토큰은 이후 관리자 전용 API 호출 시 `Authorization: Bearer <JWT>` 헤더에 포함하여 사용할 수 있다.
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: Login successful (JWT issued)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '400':
          description: Missing PIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid PIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions/open-by-slug:
    post:
      summary: 테이블 slug 값으로 세션 열기
      description: >
        관리자가 발급한 글로벌 코드(`SESSION_OPEN_CODE`)와 테이블 slug로 세션을 강제로 여는 API로,
        기존 열려 있는 세션이 있으면 모두 만료(EXPIRED) 처리 후 새로운 세션을 생성한다.
      tags: [Public]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [slug, code]
              properties:
                slug:
                  type: string
                  example: ezygbX
                code:
                  type: string
                  example: sC2mj4Kgp
      responses:
        '200':
          description: Session opened successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionOpenResponse'
        '400':
          description: Missing slug/code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Config missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Table not found or inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /orders:
    post:
      summary: Create an order (session required)
      tags: [Public]
      parameters:
        - in: header
          name: x-session-token
          required: false
          schema: { type: string }
          description: Session token (preferred). Alternatively use `Authorization: Session <token>`.
        - in: header
          name: Authorization
          required: false
          schema: { type: string, example: "Session 4e6d...ab" }
          description: Alternative header if `x-session-token` is not used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /orders/{id}/status:
    patch:
      summary: 관리자가 주문의 상태를 업데이트할 때 사용된다.
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdateRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusUpdateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    sessionAuth:
      type: apiKey
      in: header
      name: Authorization

  schemas:
    Table:
      type: object
      properties:
        id: { type: integer, example: 1 }
        label: { type: string, example: A-10 }
        slug: { type: string, example: ezygbX }
        is_active: { type: boolean, example: true }

    EnsureTableData:
      type: object
      properties:
        table:
          $ref: '#/components/schemas/Table'
        qr:
          type: object
          properties:
            slugUrl: { type: string, example: 'http://localhost:8080/t/ezygbX' }
        created: { type: boolean, example: true }

    EnsureTableResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          $ref: '#/components/schemas/EnsureTableData'

    AdminLoginRequest:
      type: object
      required: [pin]
      properties:
        pin: { type: string, example: '2025' }

    AdminLoginResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        token: { type: string }

    OrderItemInput:
      type: object
      required: [product_id, quantity]
      properties:
        product_id: { type: integer, example: 1 }
        quantity: { type: integer, example: 2 }

    OrderCreateRequest:
      type: object
      required: [items]
      properties:
        order_type:
          type: string
          enum: [DINE_IN, TAKEOUT]
        payer_name:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemInput'

    OrderCreateData:
      type: object
      properties:
        order_id: { type: integer }
        order_type: { type: string }
        status: { type: string }
        subtotal_amount: { type: number }
        discount_amount: { type: number }
        total_amount: { type: number }

    OrderCreateResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          $ref: '#/components/schemas/OrderCreateData'

    OrderStatusUpdateRequest:
      type: object
      required: [action]
      properties:
        action: { type: string, enum: [confirm, start, serve, cancel] }
        reason: { type: string }

    OrderStatusUpdateResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          type: object
          properties:
            order_id: { type: integer }
            prev: { type: string }
            next: { type: string }

    SessionOpenData:
      type: object
      properties:
        session_token: { type: string }
        session_id: { type: integer }
        table:
          $ref: '#/components/schemas/Table'
        abs_ttl_min: { type: integer }
        idle_ttl_min: { type: integer }

    SessionOpenResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          $ref: '#/components/schemas/SessionOpenData'

    SimpleOkResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }

    ErrorResponse:
      type: object
      properties:
        success: { type: boolean, example: false }
        message: { type: string }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'