openapi: 3.0.3
info:
  title: SW Festival API
  version: 1.0.0

servers:
  - url: http://localhost:3000/api/
    description: Local dev

paths:
  /sse/orders/stream:
    get:
      summary: (관리자) 실시간 주문 스트림 (SSE)
      description: |
        **Server-Sent Events (text/event-stream)**로 실시간 주문 변동을 push합니다.
        - 관리자 로그인 시 연결하면 됩니다.
        - 최초 연결 시 `snapshot` 이벤트로 현재 진행중 주문 버킷(urgent/waiting/preparing)을 전달
        - 이후 주문 생성/상태변경 시 `orders_changed` 등의 이벤트로 갱신 알림
        - 주기적 `ping` 이벤트로 연결 유지

        ### 이벤트 형식 예시
        ```
        event: snapshot
        data: {"data":{"urgent":[],"waiting":[...],"preparing":[...]}, "meta":{"now":"2025-09-07T08:57:07.602Z","counts":{"urgent":0,"waiting":2,"preparing":2},"total":4}}

        event: orders_changed
        data: {"type":"created","order_id":7}

        event: ping
        data: "pong"
        ```

        ### 테스트 (cURL)
        ```
        curl -N \
          -H "Accept: text/event-stream" \
          -H "Authorization: Bearer <관리자JWT>" \
          http://localhost:3000/api/sse/orders/stream
        ```
      tags: [ Admin, SSE ]
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Stream opened (text/event-stream)
          content:
            text/event-stream:
              schema:
                type: string
                example: |
                  : connected

                  event: snapshot
                  data: {"data":{"urgent":[],"waiting":[],"preparing":[]},"meta":{"now":"2025-09-07T08:57:07.602Z","counts":{"urgent":0,"waiting":0,"preparing":0},"total":0}}

                  event: ping
                  data: "pong"
        '401':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/tables/ensure:
    post:
      summary: 테이블 QR 코드용 암호화된 식별자 생성 API
      description: >
        관리자가 테이블 라벨(label)을 지정하면, 해당 라벨에 해당하는 테이블을 찾아 존재하지 않으면 새로 생성하고,  
        이미 존재하면 기존 테이블을 반환한다.  
        반환되는 데이터에는 **QR 코드 URL에 붙일 수 있는 암호화된 slug 값**이 포함된다.
      tags: [ Admin ]
      responses:
        '201':
          description: Created (table newly created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsureTableResponse'
        '200':
          description: OK (table already existed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnsureTableResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ label ]
              properties:
                label:
                  type: string
                  example: A-10
                active:
                  type: boolean
                  default: true

  /sessions/takeout/open:
    post:
      summary: 포장 테이블(slug)로 세션 열기 (멀티 세션)
      description: >
        포장 전용 테이블(slug)에 대해 **동시에 여러 세션을 허용**합니다.
        - 기존 열린 세션을 만료시키지 않습니다.
        - `Authorization` 불필요.
        - 응답의 `data.session_token`을 이후 주문 API에 `Authorization: Session <token>` 또는 `x-session-token`으로 전달하세요.
      tags: [ Public ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ slug ]
              properties:
                slug:
                  type: string
                  example: Ez6ZXz
      responses:
        '200':
          description: Session opened successfully (takeout; multi-session allowed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionOpenResponse'
        '400':
          description: Missing or invalid slug
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Takeout table not found or inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions/{id}/close:
    post:
      summary: 관리자 권한으로 세션 강제 종료 API
      description: >
        특정 테이블에서 열린 세션이 정상적으로 종료되지 않았거나 **세션 상태가 꼬였을 때**,  
        관리자가 세션 ID를 지정하여 해당 세션을 강제로 종료할 수 있다.  
        정상적으로 종료되면 세션 상태는 닫힘으로 업데이트된다.
      tags: [ Admin ]
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleOkResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Session not open (already closed/expired)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/login:
    post:
      summary: 관리자 PIN 로그인 API
      description: >
        관리자가 사전에 설정된 **PIN 번호**를 입력하여 로그인하면,  
        인증 성공 시 JWT 토큰이 발급된다.  
        이 토큰은 이후 관리자 전용 API 호출 시 `Authorization: Bearer <JWT>` 헤더에 포함하여 사용할 수 있다.
      tags: [ Admin ]
      responses:
        '200':
          description: Login successful (JWT issued)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '400':
          description: Missing PIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid PIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'

  /sessions/open-by-slug:
    post:
      summary: 테이블 slug 값으로 세션 열기
      description: >
        관리자가 발급한 글로벌 코드(`SESSION_OPEN_CODE`)와 테이블 slug로 세션을 강제로 여는 API로,
        기존 열려 있는 세션이 있으면 모두 만료(EXPIRED) 처리 후 새로운 세션을 생성한다.
      tags: [ Public ]
      responses:
        '200':
          description: Session opened successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionOpenResponse'
        '400':
          description: Missing slug/code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Config missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Table not found or inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ slug, code ]
              properties:
                slug:
                  type: string
                  example: ezygbX
                code:
                  type: string
                  example: sC2mj4Kgp

  /orders:
    post:
      summary: Create an order (session required)
      tags: [ Public ]
      # 세션 토큰 두 방식 중 하나로 인증: Authorization: Session <token> 또는 x-session-token
      security:
        - sessionAuth: [ ]
        - xSessionTokenAuth: [ ]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateRequest'

  /orders/{id}/status:
    patch:
      summary: 관리자가 주문의 상태를 업데이트할 때 사용된다.
      tags: [ Admin ]
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusUpdateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/ServerError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdateRequest'

  /orders/active:
    get:
      summary: 진행 중 주문을 버킷별(긴급/대기중/준비중)로 반환
      description: |
        - **긴급(urgent)**: (CONFIRMED 또는 IN_PROGRESS) 이면서 기준 시간(기본 15분) 이상 경과  
        - **대기중(waiting)**: CONFIRMED  
        - **준비중(preparing)**: IN_PROGRESS  
        - 정렬: 각 버킷 내 "경과분(age_min)" 내림차순(오래된 순)
      tags: [ Admin ]
      security:
        - bearerAuth: [ ]   # Authorization: Bearer <JWT>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveOrdersGroupedResponse'
        '401':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /orders/{id}:
    get:
      summary: (사용자) 내 주문 상세 조회
      description: |
        세션 토큰으로 인증된 **본인 세션의 주문**만 조회됩니다.  
        - 세션 토큰은 `Authorization: Session <token>` 또는 `x-session-token` 헤더로 전달하세요.
      tags: [ Public, Orders ]
      security:
        - sessionAuth: [ ]       # Authorization: Session <token>
        - xSessionTokenAuth: [ ] # 또는 x-session-token
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
          description: 주문 ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailResponse'
        '401':
          description: 세션 토큰 누락/무효
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 본인 세션의 주문이 아님
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /orders/admin/{id}:
    get:
      summary: (관리자) 주문 상세 조회
      description: 관리자 권한으로 특정 주문의 상세 정보를 조회합니다.
      tags: [ Admin, Orders ]
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
          description: 주문 ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailResponse'
        '401':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /menu:
    get:
      summary: (공용) 전체 메뉴 조회
      description: |
        - 공개용 메뉴 목록을 반환합니다.
        - 응답에는 `is_sold_out`이 포함되며, **재고(stock)는 노출되지 않습니다.**
      tags: [ Public, Menu ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: menu returned successfully }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/MenuPublicItem' }
        '500':
          $ref: '#/components/responses/ServerError'

  /menu/admin:
    get:
      summary: (관리자) 전체 메뉴 조회
      description: |
        - 관리자용 메뉴 목록을 반환합니다.
        - 응답에는 `stock` 및 `is_sold_out`이 포함됩니다.
      tags: [ Admin, Menu ]
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: menu returned successfully }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/MenuAdminItem' }
        '401':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /menu/top:
    get:
      summary: (공용) 인기 메뉴 Top N
      description: |
        - 금일(행사일 기준) 판매 집계를 기반으로 **메인/사이드만** 상위 N개 인기 메뉴를 반환합니다.
        - 정렬 우선순위: 판매수량(`qty_sold`) 내림차순 → 매출합계(`amount_sold`) 내림차순.
        - 쿼리 파라미터 `count`가 없으면 기본 3개를 반환합니다.
      tags: [ Public, Menu ]
      parameters:
        - in: query
          name: count
          required: false
          schema: { type: integer, minimum: 1, default: 3 }
          description: 상위 N개 개수(기본 3)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: menu returned successfully }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/PopularMenuItem' }
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description:
        관리자 JWT. 예) Authorization: Bearer <JWT>
    sessionAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        사용자 세션 토큰. 권장 형식:
        Authorization: Session <token>
    xSessionTokenAuth:
      type: apiKey
      in: header
      name: x-session-token
      description: 사용자 세션 토큰(대안 헤더)

  schemas:
    # ===== 메뉴 =====
    MenuType:
      type: string
      enum: [ MAIN, SIDE, DRINK ]
      example: MAIN

    MenuPublicItem:
      type: object
      properties:
        id: { type: integer, example: 7 }
        name: { type: string,  example: 김치전 }
        price: { type: number,  format: float, example: 6000 }
        image_url: { type: string,  nullable: true, example: null }
        description: { type: string,  nullable: true, example: 바삭하고 매콤한 김치전 }
        type: { $ref: '#/components/schemas/MenuType' }
        is_sold_out: { type: boolean, example: false }

    MenuAdminItem:
      allOf:
        - $ref: '#/components/schemas/MenuPublicItem'
        - type: object
          properties:
            stock: { type: integer, example: 24 }

    PopularMenuItem:
      type: object
      properties:
        id: { type: integer, example: 3 }
        name: { type: string,  example: 오징어볶음 }
        image_url: { type: string,  nullable: true, example: null }
        description: { type: string,  nullable: true, example: 매콤한 양념의 오징어볶음 }
        qty_sold: { type: integer, example: 9 }
        amount_sold: { type: number,  format: float, example: 72000.00 }

    Table:
      type: object
      properties:
        id: { type: integer, example: 1 }
        label: { type: string, example: A-10 }
        slug: { type: string, example: ezygbX }
        is_active: { type: boolean, example: true }

    EnsureTableData:
      type: object
      properties:
        table:
          $ref: '#/components/schemas/Table'
        qr:
          type: object
          properties:
            slugUrl: { type: string, example: 'http://localhost:8080/t/ezygbX' }
        created: { type: boolean, example: true }

    EnsureTableResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          $ref: '#/components/schemas/EnsureTableData'

    AdminLoginRequest:
      type: object
      required: [ pin ]
      properties:
        pin: { type: string, example: '2025' }

    AdminLoginResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        token: { type: string }

    OrderItemInput:
      type: object
      required: [ product_id, quantity ]
      properties:
        product_id: { type: integer, example: 1 }
        quantity: { type: integer, example: 2 }

    OrderCreateRequest:
      type: object
      required: [ items ]
      properties:
        order_type:
          type: string
          enum: [ DINE_IN, TAKEOUT ]
        payer_name:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemInput'

    OrderCreateData:
      type: object
      properties:
        order_id: { type: integer }
        order_type: { type: string }
        status: { type: string }
        subtotal_amount: { type: number }
        discount_amount: { type: number }
        total_amount: { type: number }

    OrderCreateResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          $ref: '#/components/schemas/OrderCreateData'

    OrderStatusUpdateRequest:
      type: object
      required: [ action ]
      properties:
        action: { type: string, enum: [ confirm, start, serve, cancel ] }
        reason: { type: string }

    OrderStatusUpdateResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          type: object
          properties:
            order_id: { type: integer }
            prev: { type: string }
            next: { type: string }

    SessionOpenData:
      type: object
      properties:
        session_token: { type: string }
        session_id: { type: integer }
        table:
          $ref: '#/components/schemas/Table'
        abs_ttl_min: { type: integer }
        idle_ttl_min: { type: integer }
        channel: # ✅ optional, 응답 일관성용
          type: string
          enum: [ DINE_IN, TAKEOUT ]
          example: TAKEOUT

    SessionOpenResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        data:
          $ref: '#/components/schemas/SessionOpenData'

    SimpleOkResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }

    ErrorResponse:
      type: object
      properties:
        success: { type: boolean, example: false }
        message: { type: string }

    # ====== 신규(활성 주문 버킷 & 상세) ======
    OrderCard:
      type: object
      properties:
        id: { type: integer, example: 318 }
        status:
          type: string
          enum: [ CONFIRMED, IN_PROGRESS ]
          example: IN_PROGRESS
        table: { type: string, nullable: true, example: A-10 }
        payer_name: { type: string, nullable: true, example: 임승우 }
        age_min: { type: integer, example: 8 }
        placed_at: { type: string, format: date-time, example: '2025-08-29T12:22:00.000Z' }

    ActiveOrdersGroupedData:
      type: object
      properties:
        urgent:
          type: array
          items: { $ref: '#/components/schemas/OrderCard' }
        waiting:
          type: array
          items: { $ref: '#/components/schemas/OrderCard' }
        preparing:
          type: array
          items: { $ref: '#/components/schemas/OrderCard' }

    ActiveOrdersGroupedResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: active orders grouped }
        data:
          $ref: '#/components/schemas/ActiveOrdersGroupedData'
        meta:
          type: object
          properties:
            now: { type: string, format: date-time, example: '2025-08-29T12:38:40.000Z' }
            threshold_min: { type: integer, example: 15 }
            counts:
              type: object
              properties:
                urgent: { type: integer, example: 1 }
                waiting: { type: integer, example: 1 }
                preparing: { type: integer, example: 1 }
            total: { type: integer, example: 3 }

    OrderDetailItem:
      type: object
      properties:
        id: { type: integer, example: 1 }
        product_id: { type: integer, example: 5 }
        name: { type: string,  example: 맥주 }
        qty: { type: integer, example: 2 }
        unit_price: { type: number,  format: float, example: 3000 }
        line_total: { type: number,  format: float, example: 6000 }

    OrderDetailData:
      type: object
      properties:
        id: { type: integer, example: 123 }
        status: { type: string, example: CONFIRMED }
        table:
          type: object
          nullable: true
          properties:
            id: { type: integer, example: 7 }
            label: { type: string,  example: A-10 }
        payer_name: { type: string, example: 임승우 }
        amounts:
          type: object
          properties:
            subtotal: { type: number, format: float, example: 22000 }
            discount: { type: number, format: float, example: 0 }
            total: { type: number, format: float, example: 22000 }
        created_at: { type: string, format: date-time, example: '2025-08-29T12:00:00.000Z' }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderDetailItem' }

    OrderDetailResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        message: { type: string, example: order details retrieved successfully }
        data:
          $ref: '#/components/schemas/OrderDetailData'

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
